@inherits AdminCompontentBase
<MCard Class="@($"d-flex flex-column px-2 rounded-xl {(AlarmRule.IsEnabled?"":"fill-disabled")}")" MinHeight=Height>
    <MCardTitle class="px-0 py-1">
        <MListItem>
            <MSpacer />
            <MListItemIcon Class="mr-n2">
                <MMenu OffsetY>
                    <ActivatorContent>
                        <MIcon @attributes="@context.Attrs" Size=26 Color="#323D6F">mdi-dots-horizontal</MIcon>
                    </ActivatorContent>
                    <ChildContent>
                        <MList Dense>
                            <MListItem Link OnClick="HandleEdit">
                                <MListItemContent>
                                    <MListItemTitle>
                                        <span class="body regular--text">@T("Edit")</span>
                                    </MListItemTitle>
                                </MListItemContent>
                            </MListItem>
                            <MListItem Link>
                                <MListItemContent>
                                    <MListItemTitle>
                                        <span class="body regular--text">@T("AlarmHistory")</span>
                                    </MListItemTitle>
                                </MListItemContent>
                            </MListItem>
                            @if (AlarmRule.IsEnabled)
                            {
                                <MListItem Link OnClick="HandleDisable">
                                    <MListItemContent>
                                        <MListItemTitle>
                                            <span class="body regular--text">@T("Disable")</span>
                                        </MListItemTitle>
                                    </MListItemContent>
                                </MListItem>
                            }
                            @if (!AlarmRule.IsEnabled)
                            {
                                <MListItem Link OnClick="HandleEnabled">
                                    <MListItemContent>
                                        <MListItemTitle>
                                            <span class="body regular--text">@T("Enabled")</span>
                                        </MListItemTitle>
                                    </MListItemContent>
                                </MListItem>
                            }
                        </MList>
                    </ChildContent>
                </MMenu>

            </MListItemIcon>
        </MListItem>
    </MCardTitle>
    <MCardText class="flex-grow-1 px-4 d-flex flex-column">
        <div class="h6 text-truncate regular--text">@AlarmRule.DisplayName</div>
        <div class="subtitle2 mt-5">
            @if (AlarmRule.Type == AlarmRuleTypes.Log)
            {
                <MChip Color="emphasis2" Small Outlined>
                    @AlarmRule.ProjectIdentity
                </MChip>
                <MChip Class="ml-2" Color="emphasis2" Small Outlined>
                    @AlarmRule.AppIdentity
                </MChip>
            }
            @if (AlarmRule.Type == AlarmRuleTypes.Metric)
            {
                foreach (var item in _metricMonitorItems)
                {
                    <MChip Class="ml-2" Color="emphasis2" Small Outlined>
                        @item.Aggregation.Name
                    </MChip>
                }
            }
        </div>
    </MCardText>
    <MCardActions class="px-3 pb-3">
        <MSpacer />
        <span class="caption regular3--text">@AlarmRule.ModificationTime.Humanize(culture:I18n.Culture) </span>
        <span class="d-flex px-1" style="height: 8px">
            <MDivider Vertical />
        </span>
        <span class="caption regular2--text">@AlarmRule.ModifierName</span>
    </MCardActions>
</MCard>

@code {
    [Parameter]
    public int Height { get; set; } = 210;

    [EditorRequired]
    [Parameter]
    public AlarmRuleListViewModel AlarmRule { get; set; } = null!;

    [Parameter]
    public EventCallback OnEdit { get; set; }

    private List<MetricMonitorItemViewModel> _metricMonitorItems => AlarmRule.MetricMonitorItems.Where(x => !string.IsNullOrEmpty(x.Aggregation.Name)).Take(2).ToList();

    AlarmRuleService AlarmRuleService => AlertCaller.AlarmRuleService;

    private async Task HandleEdit()
    {
        if (OnEdit.HasDelegate)
        {
            await OnEdit.InvokeAsync();
        }
    }

    private async Task HandleDisable()
    {
        await AlarmRuleService.SetIsEnabledAsync(AlarmRule.Id, false);
        AlarmRule.IsEnabled = false;
    }

    private async Task HandleEnabled()
    {
        await AlarmRuleService.SetIsEnabledAsync(AlarmRule.Id, true);
        AlarmRule.IsEnabled = true;
    }
}