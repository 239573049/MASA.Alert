@inherits AdminCompontentBase
<DefaultSheetDialog Value="_visible" ValueChanged="HandleVisibleChanged"
                    Title="@T("AddAlarmRule")" ContentClass="sheet-dialog">
    <ChildContent>
        <MForm Model="_model" EnableValidation @ref="_form" Class="full-height">
            <MStepper Value="_model.Step" Elevation=0 Class="d-flex flex-column full-height">
                <MStepperHeader Style="box-shadow:none !important">
                    <MStepperStep Step="1" Complete="_model.Step>1">
                        @T("MonitoringSetting")
                    </MStepperStep>
                    <MDivider></MDivider>
                    <MStepperStep Step="2">
                        @T("AlarmSetting")
                    </MStepperStep>
                </MStepperHeader>
                <MStepperItems Class="full-height">
                    <MStepperContent Class="full-height" Step="1">
                        <AutoHeight Overflow>
                            <AutoHeightContent>
                                <DefaultTitle Class="mb-3">@T("ChartSetting")
                                    <DefaultTooltip Class="ml-2" Tooltip="@T("ChartSettingTip")" />
                                </DefaultTitle>
                                <MRow>
                                    <MCol Md="3">
                                        <STextField @bind-Value="_model.ChartYAxisUnit" Label="@T(nameof(_model.ChartYAxisUnit))"/>
                                    </MCol>
                                </MRow>
                                <MRow>
                                    <MCol Md="2">
                                        <SSelect @bind-Value="_model.CheckFrequency.Type" Items="Enum.GetValues<AlarmCheckFrequencyTypes>().ToList()" ItemText="e => T(e==default?string.Empty:e.ToString())" ItemValue="e=> e" Label="@T(nameof(_model.CheckFrequency))" />
                                    </MCol>
                                    @if (_model.CheckFrequency.Type == AlarmCheckFrequencyTypes.FixedInterval)
                                    {
                                        <MCol Md="2">
                                            <STextField @bind-Value="_model.CheckFrequency.FixedInterval.IntervalTime" />
                                        </MCol>
                                        <MCol Md="2">
                                            <SSelect @bind-Value="_model.CheckFrequency.FixedInterval.IntervalTimeType" Items="Enum.GetValues<TimeTypes>().ToList()" ItemText="e => T(e==default?string.Empty:e.ToString())" ItemValue="e=> e" />
                                        </MCol>
                                    }
                                    @if (_model.CheckFrequency.Type == AlarmCheckFrequencyTypes.Cron)
                                    {
                                        <MCol Md="3">
                                            <STextField @bind-Value="_model.CheckFrequency.CronExpression" Label="@T(nameof(_model.CheckFrequency.CronExpression))" AppendIcon="mdi-clock" OnAppendClick="OpenCronModal" OnChange="(string v)=>GetNextRunTime()" />
                                        </MCol>
                                    }
                                </MRow>
                                @if (!string.IsNullOrEmpty(_model.CheckFrequency.CronExpression))
                                {
                                    <div>
                                        @((MarkupString)_nextRunTimeStr)
                                    </div>
                                }
                                <MRow Class="my-8">
                                    <MSwitch @bind-Value="_model.IsGetTotal" Inset Class="label my-auto ml-4" Label="@T("GetTotal")" />
                                    @if (_model.IsGetTotal)
                                    {
                                        <MCol Md="2">
                                            <STextField @bind-Value="_model.TotalVariable" Label="@T(nameof(_model.TotalVariable))" />
                                        </MCol>
                                    }
                                </MRow>
                                @foreach (var item in _model.MetricMonitorItems){
                                    <MRow NoGutters Class="mt-6">
                                        <MCol Md="2">
                                            <SSelect Class="ml-2" @bind-Value="item.Name" Items="_names" ItemText="v => v" ItemValue="v=> v" TValue="string" TItem="string" TItemValue="string" Label="@T("MetricMonitor.Name")" OnChange="(v)=>HandleMetricNameChange(v,item)" />
                                        </MCol>
                                        <MCol Md="2">
                                            <SSelect Class="ml-2" @bind-Value="item.Tag" Items="item.TagItems" ItemText="v => v" ItemValue="v=> v" TValue="string" TItem="string" TItemValue="string" Label="@T("MetricMonitor.Tag")" OnChange="(v)=>HandleMetricTagChange(v,item)" />
                                        </MCol>
                                        <MCol Md="2">
                                            <SSelect Class="ml-2" @bind-Value="item.ComparisonOperator" Items="Enum.GetValues<MetricComparisonOperator>().ToList()" ItemText="e => T(e==default?string.Empty:e.ToString())" ItemValue="e=> e" />
                                        </MCol>
                                        <MCol Md="2">
                                            <SSelect Class="ml-2" @bind-Value="item.Value" Items="item.ValueItems" ItemText="v => v" ItemValue="v=> v" Label="@T(nameof(item.Value))" />
                                        </MCol>
                                    </MRow>
                                    <MRow NoGutters Class="mt-3">
                                        <MCol Md="2">
                                            <SSelect Class="ml-2" @bind-Value="item.AggregationType" Items="Enum.GetValues<MetricAggregationTypes>().ToList()" ItemText="e => T(e==default?string.Empty:e.ToString())" ItemValue="e=> e" />
                                        </MCol>
                                        <MCol Md="3">
                                            <STextField Class="ml-2" @bind-Value="item.Alias" Label="@T("MetricMonitor.Alias")">
                                                <PrependContent>
                                                    <span class="default--text subtitle2 my-auto ml-2">@T("as")</span>
                                                </PrependContent>
                                            </STextField>
                                        </MCol>
                                        <MCol Md="4" Class="d-flex">
                                            <MSwitch @bind-Value="item.IsOffset" Inset Class="label my-auto ml-4">
                                                <LabelContent>
                                                    <DefaultTooltip Class="ml-2" Tooltip="@T("ChartSettingTip")" />
                                                    <span class="default--text subtitle2 my-auto ml-1">@T("Offset")</span>
                                                </LabelContent>
                                            </MSwitch>
                                            @if (item.IsOffset)
                                            {
                                                <STextField @bind-Value="item.OffsetPeriod" Class="ml-2">
                                                    <AppendOuterContent>
                                                        <span class="default--text subtitle2 my-auto">@T("Period")</span>
                                                    </AppendOuterContent>
                                                </STextField>
                                            }
                                        </MCol>
                                        <MSpacer></MSpacer>
                                        <MCol Class="my-auto">
                                            <SIcon Size="24" OnClick="HandleMetricMonitorItemsAdd">mdi-plus-circle</SIcon>
                                            @if (_model.MetricMonitorItems.IndexOf(item) > 0)
                                            {
                                                <SIcon Size="24" Class="ml-2" OnClick="()=>HandleMetricMonitorItemsRemove(item)">mdi-delete-outline</SIcon>
                                            }
                                        </MCol>
                                    </MRow>
                                }
                            </AutoHeightContent>
                            <FooterContent>
                                <div class="d-flex">
                                    <MSpacer></MSpacer>
                                    <SButton Text Color="primary" OnClick="()=>_previewChart?.OpenModalAsync()!">@T("ChartPreview")</SButton>
                                    <SButton Medium OnClick="()=>_model.Step=2" Class="ml-6">@T("NextStep")</SButton>
                                </div>
                            </FooterContent>
                        </AutoHeight>
                    </MStepperContent>
                    <MStepperContent Class="full-height" Step="2">
                        <AutoHeight Overflow>
                            <AutoHeightContent>
                                <AlarmRuleSetting @bind-Model="_model"></AlarmRuleSetting>
                            </AutoHeightContent>
                            <FooterContent>
                                <div class="d-flex">
                                    <MSpacer></MSpacer>
                                    <SButton Text Color="primary" OnClick="()=>_previewChart?.OpenModalAsync()!">@T("ChartPreview")</SButton>
                                    <SButton Medium OnClick="()=>_model.Step=1" Outlined　Class="ml-6">@T("PreviousStep")</SButton>
                                    <SButton Medium Class="ml-6" OnClick="HandleOk">@T("Submit")</SButton>
                                </div>
                            </FooterContent>
                        </AutoHeight>
                    </MStepperContent>
                </MStepperItems>
            </MStepper>
        </MForm>
    </ChildContent>
</DefaultSheetDialog>

<SSimpleModal @bind-Value="@_cronVisible" Title="@T("CronExpression")" OnSave="SetCronExpression">
    <PCron @bind-Value="@(_tempCron)">
    </PCron>
</SSimpleModal>

<AlarmPreviewChartModal @ref="_previewChart" AlarmRule="_model" />