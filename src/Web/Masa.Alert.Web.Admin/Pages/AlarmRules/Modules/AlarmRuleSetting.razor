@inherits AdminCompontentBase

<DefaultTitle Class="mb-3">@T("BaseInfo")</DefaultTitle>
<STextField @bind-Value="Model.DisplayName" Label="@T(nameof(Model.DisplayName))" />
<DefaultTitle Class="my-5">@T("TriggerRules")</DefaultTitle>
@foreach (var item in Model.Items)
{
    <STextarea Class="mt-8" @bind-Value="item.Expression" Label="@T(nameof(item.Expression))" Outlined HideDetails="@("auto")">
        <AppendOuterContent>
            <DefaultTooltip Class="ml-2" Tooltip="@T("ExpressionTip")" />
        </AppendOuterContent>
    </STextarea>
    <MRow NoGutters Class="mt-4">
        <MCol Md="2">
            <SSelect @bind-Value="item.AlertSeverity" Items="Enum.GetValues<AlertSeverity>().ToList()" ItemText="e => T(e==default?string.Empty:e.ToString())" ItemValue="e=> e" Label="@T(nameof(item.AlertSeverity))">
            </SSelect>
        </MCol>

        <MCol Class="my-auto d-flex">
            <MSwitch @bind-Value="item.IsNotification" Inset Class="label ml-5 my-auto">
                <LabelContent>
                    <span class="default--text subtitle2">@T("IsNotification")</span>
                </LabelContent>
            </MSwitch>
            <MSwitch @bind-Value="item.IsRecoveryNotification" Inset Class="label ml-5 my-auto">
                <LabelContent>
                    <span class="default--text subtitle2">@T("IsRecoveryNotification")</span>
                </LabelContent>
            </MSwitch>
            <SIcon Size="24" OnClick="HandleItemsAdd" Class="ml-5 my-auto">mdi-plus-circle</SIcon>
            @if (Model.Items.IndexOf(item) > 0)
            {
                <SIcon Size="24" Class="ml-4 my-auto" OnClick="()=>HandleItemsRemove(item)">mdi-delete-outline</SIcon>
            }
        </MCol>
    </MRow>
    @if (item.IsNotification)
    {
        <NotificationConfig @bind-value="item.NotificationConfig"></NotificationConfig>
    }
    @if (item.IsRecoveryNotification)
    {
        <NotificationConfig @bind-value="item.RecoveryNotificationConfig"></NotificationConfig>
    }
}
<DefaultTitle Class="mt-6">@T("AdvancedConfiguration")</DefaultTitle>
<MRow NoGutters Class="mt-3">
    <MCol Md="2">
        <STextField @bind-Value="Model.ContinuousTriggerThreshold" Label="@T(nameof(Model.ContinuousTriggerThreshold))">
            <AppendOuterContent>
                <DefaultTooltip Class="ml-2" Tooltip="@T("ContinuousTriggerThresholdTip")" />
            </AppendOuterContent>
        </STextField>
    </MCol>
</MRow>
<MRow Class="mt-3">
    <MCol Md="2">
        <SSelect @bind-Value="Model.SilenceCycle.Type" Items="Enum.GetValues<SilenceCycleTypes>().ToList()" ItemText="e => T(e==default?string.Empty:e.ToString())" ItemValue="e=> e" Label="@T(nameof(Model.SilenceCycle))">
            <AppendOuterContent>
                <DefaultTooltip Class="ml-2" Tooltip="@T("SilenceCycleTip")" />
            </AppendOuterContent>
        </SSelect>
    </MCol>
    @if (Model.SilenceCycle.Type == SilenceCycleTypes.Time)
    {
        <MCol Md="2">
            <STextField @bind-Value="Model.SilenceCycle.TimeInterval.IntervalTime" />
        </MCol>
        <MCol Md="2">
            <SSelect @bind-Value="Model.SilenceCycle.TimeInterval.IntervalTimeType" Items="Enum.GetValues<TimeTypes>().ToList()" ItemText="e => T(e==default?string.Empty:e.ToString())" ItemValue="e=> e" />
        </MCol>
    }
    @if (Model.SilenceCycle.Type == SilenceCycleTypes.Cycle)
    {
        <MCol Md="3">
            <STextField @bind-Value="Model.SilenceCycle.SilenceCycleValue" Class="ml-2">
                <AppendOuterContent>
                    <span class="default--text subtitle2 my-auto">@T("Period")</span>
                </AppendOuterContent>
            </STextField>
        </MCol>
    }
</MRow>
<EnableSwitch Class="mt-8 ml-1" @bind-Value="Model.IsEnabled" />

@code {
    [Parameter]
    public AlarmRuleUpsertViewModel Model { get; set; } = new();

    [Parameter]
    public EventCallback<AlarmRuleUpsertViewModel> ModelChanged { get; set; }
    private List<string> _items = new();

    protected override string? PageName { get; set; } = "AlarmRule";

    private void HandleItemsAdd()
    {
        Model.Items.Add(new AlarmRuleItemViewModel());
    }

    private void HandleItemsRemove(AlarmRuleItemViewModel item)
    {
        Model.Items.Remove(item);
    }
}
