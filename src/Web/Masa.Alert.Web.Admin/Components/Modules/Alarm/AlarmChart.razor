@inherits AdminCompontentBase
<div class="d-flex justify-space-between">
    <span class="h5 emphasis--text">@AlarmHistory.AlarmRule.ProjectIdentity</span>
    <span class="body2 regular--text">
        <SDateTimeRangePicker Class="btn-fill-line" StartTime="AlarmHistory.FirstAlarmTime.DateTime" EndTime="AlarmHistory.LastAlarmTime.DateTime" Style="border:none" />
    </span>
</div>
<div class="d-flex justify-space-between mt-2">
    <span class="body2 regular--text">@AlarmHistory.AlarmRule.AppIdentity</span>
    <span class="body2 regular--text">
        @AlarmHistory.AlarmRule.DisplayName (@AlarmHistory.AlarmRule.ChartYAxisUnit)
    </span>
</div>

<div class="d-flex align-center justify-center">
    <MECharts Option="_option" Width="Width" Height="Height">
    </MECharts>
</div>

@code {
    [Parameter]
    public StringNumber Width { get; set; } = 761;

    [Parameter]
    public StringNumber Height { get; set; } = 219;

    [EditorRequired]
    [Parameter]
    public AlarmHistoryViewModel AlarmHistory { get; set; } = new();

    protected override string? PageName { get; set; } = "AlarmChartBlock";

    private DateTime? _startTime { get; set; }

    private DateTime? _endTime { get; set; }

    private object _option = new();

    AlarmRuleRecordService AlarmRuleRecordService => AlertCaller.AlarmRuleRecordService;

    protected override async void OnParametersSet()
    {
        _startTime = null;
        _endTime = null;

        await LoadData();
    }

    private async Task LoadData()
    {
        var queryParam = new GetAlarmRuleRecordInputDto(999)
            {
                AlarmHistoryId = AlarmHistory.Id
            };

        var dtos = (await AlarmRuleRecordService.GetListAsync(queryParam));
        var paginatedList = dtos?.Adapt<PaginatedListDto<AlarmRuleRecordListViewModel>>() ?? new();
        var records = paginatedList.Result;
        var legendData = new List<string>();

        foreach (var item in records)
        {
            foreach (var key in item.AggregateResult.Keys)
            {
                if (!legendData.Contains(key))
                {
                    legendData.Add(key);
                }
            }
        }

        var seriesData = legendData.Select(key =>
        {
            var data = records.Select(x =>
            {
                var val = x.AggregateResult.FirstOrDefault(x => x.Key == key).Value;
                return new List<long> { new DateTimeOffset(x.CreationTime).ToUnixTimeMilliseconds(), val };
            });

            return new
            {
                Name = key,
                Type = "line",
                Stack = "Total",
                Data = data,
                AreaStyle = new { },
                Smooth = true
            };
        });

        RenderCharts(legendData, seriesData);
    }

    private void RenderCharts(List<string> legendData, object seriesData)
    {
        _option = new
        {
            Tooltip = new
            {
                Trigger = "axis",
            },
            Legend = new
            {
                Bottom = "0%",
                Data = legendData
            },
            Grid = new
            {
                Bottom = 50
            },
            XAxis = new
            {
                Type = "time",
                BoundaryGap = false
            },
            YAxis = new
            {
                Type = "value"
            },
            Series = seriesData
        };
    }
}
