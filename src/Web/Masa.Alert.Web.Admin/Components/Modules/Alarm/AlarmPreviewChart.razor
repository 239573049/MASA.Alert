@inherits AdminCompontentBase
<MRow Justify="JustifyTypes.SpaceBetween" Align="AlignTypes.Center">
    <MCol>
        <span class="emphasis--text btn">@T("YAxisUnits")：@ChartYAxisUnit</span>
        <span class="emphasis--text caption">@T("ChartPreviewTips")</span>
    </MCol>
    <MCol>
        <SDateTimeRangePicker @bind-StartTime="_startTime" @bind-EndTime="_endTime" Style="border:none" OnChange="TimeRangeChange" />
    </MCol>
</MRow>
<div class="d-flex align-center justify-center">
    <MECharts Option="_option" Width="Width" Height="Height">
    </MECharts>
</div>

@code {
    [Parameter]
    public StringNumber Width { get; set; } = 761;

    [Parameter]
    public StringNumber Height { get; set; } = 219;

    [EditorRequired]
    [Parameter]
    public AlarmRuleUpsertViewModel AlarmRule { get; set; } = new();

    [Parameter]
    public string ChartYAxisUnit { get; set; } = string.Empty;

    protected override string? PageName { get; set; } = "AlarmChart";

    private DateTime? _startTime { get; set; }

    private DateTime? _endTime { get; set; }

    private object _option = new();

    protected override void OnParametersSet()
    {
        _startTime = null;
        _endTime = null;

        FillData();
    }

    private void RenderCharts(List<string> legendData, object seriesData)
    {
        _option = new
        {
            Tooltip = new
            {
                Trigger = "axis",
            },
            Legend = new
            {
                Left = "3%",
                Data = legendData
            },
            Grid = new
            {
                Left = "3%",
                Right = "4%",
                Bottom = "3%",
                ContainLabel = true
            },
            XAxis = new
            {
                Type = "time",
                BoundaryGap = false
            },
            YAxis = new
            {
                Type = "value"
            },
            Series = seriesData
        };
    }

    private void FillData()
    {
        var timeList = new List<long>();
        var chartData = new List<AlarmPreviewChartDataItemModel>();

        if (AlarmRule.CheckFrequency.Type == AlarmCheckFrequencyTypes.FixedInterval)
        {
            timeList = GetTimeListByFixedInterval();
        }

        if (AlarmRule.CheckFrequency.Type == AlarmCheckFrequencyTypes.Cron)
        {
            timeList = GetTimeListByCron();
        }
        Random a = new Random();

        if (AlarmRule.Type == AlarmRuleTypes.Log)
        {
            foreach (var item in AlarmRule.LogMonitorItems)
            {
                var data = timeList.Select(x => new List<long> { x, a.Next(100) }).ToList()!;
                chartData.Add(new AlarmPreviewChartDataItemModel
                    {
                        Name = item.Alias,
                        Data = data
                    });
            }
        }

        if (AlarmRule.Type == AlarmRuleTypes.Metric)
        {
            foreach (var item in AlarmRule.MetricMonitorItems)
            {
                var data = timeList.Select(x => new List<long> { x, a.Next(100) }).ToList()!;
                chartData.Add(new AlarmPreviewChartDataItemModel
                    {
                        Name = item.Alias,
                        Data = data
                    });
            }
        }

        var legendData = chartData.Select(x => x.Name).ToList();
        var seriesData = chartData.Select(x => new
        {
            Name = x.Name,
            Type = "line",
            Stack = "Total",
            Data = x.Data
        });
        RenderCharts(legendData, seriesData);
    }

    private List<long> GetTimeListByFixedInterval(int count = 10)
    {
        var timeList = new List<long>();
        var time = new DateTimeOffset(_startTime ?? DateTime.Now);

        var i = 0;
        while (CheckIsAddTime(time, i))
        {
            timeList.Add(time.ToUnixTimeMilliseconds());

            var intervalTime = AlarmRule.CheckFrequency.FixedInterval.GetIntervalTime();

            if (intervalTime.HasValue)
            {
                time = time.Add(intervalTime.Value);
            }

            i++;
        }
        return timeList;
    }

    private List<long> GetTimeListByCron(int count = 10)
    {
        var timeList = new List<long>();

        var cronExpression = new CronExpression(AlarmRule.CheckFrequency.CronExpression);

        var timezone = TimeZoneInfo.GetSystemTimeZones().FirstOrDefault(p => p.BaseUtcOffset == TimezoneOffset);

        if (timezone != null)
            cronExpression.TimeZone = timezone;

        var time = new DateTimeOffset(_startTime ?? DateTime.Now);

        var i = 0;
        while (CheckIsAddTime(time, i))
        {
            timeList.Add(time.ToUnixTimeMilliseconds());

            var nextExcuteTime = cronExpression.GetNextValidTimeAfter(time);
            if (nextExcuteTime.HasValue)
            {
                time = nextExcuteTime.Value;
            }

            i++;
        }

        return timeList;
    }

    private void TimeRangeChange()
    {
        FillData();
    }

    public int GetMonth(DateTime date1, DateTime date2)
    {
        int year1 = date1.Year;
        int year2 = date2.Year;
        int month1 = date1.Month;
        int month2 = date2.Month;
        int months = 12 * (year2 - year1) + (month2 - month1);
        return months;
    }

    private bool CheckIsAddTime(DateTimeOffset time, int i)
    {
        if (i > 300)
        {
            return false;
        }

        if (_endTime.HasValue && time <= _endTime)
        {
            return true;
        }

        if (!_endTime.HasValue && i < 10)
        {
            return true;
        }

        return false;
    }
}
