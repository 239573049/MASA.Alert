@inherits AdminCompontentBase
<SModal Value="@_visible" Title="@T("ChartPreview")" SaveText="@T("UpdateChart")" Width="Width" HeaderClass="py-2" BodyClass="pt-0" OnCancel="()=>_visible=false">
    <AlarmPreviewChart AlarmRule="AlarmRule" ChartYAxisUnit="@AlarmRule.ChartYAxisUnit"></AlarmPreviewChart>
    <DefaultTitle>
        @T("LogSamplingPreview")
        <DefaultTooltip Class="ml-2" Tooltip="@T("LogSamplingPreviewTips")" />
    </DefaultTitle>
    <MTextarea @bind-Value="_logStr" Readonly Outlined Rows="11">
    </MTextarea>
</SModal>

@code {
    [Parameter]
    public StringNumber Width { get; set; } = 761;

    [EditorRequired]
    [Parameter]
    public AlarmRuleUpsertViewModel AlarmRule { get; set; } = new();

    [Inject]
    public ITscClient TscClient { get; set; } = default!;

    private AlarmRuleViewModel _alarmRule = new();

    protected override string? PageName { get; set; } = "AlarmChart";

    private bool _visible = false;

    private LogDto _log = new();
    private string _logStr = string.Empty;

    public async Task OpenModalAsync()
    {
        _alarmRule = AlarmRule?.Adapt<AlarmRuleViewModel>() ?? new();
        await GetLatestAsync();
        await InvokeAsync(() =>
        {
            _visible = true;
            StateHasChanged();
        });
    }

    public async Task GetLatestAsync()
    {
        var request = new LogLatestRequest
            {
                Query = AlarmRule.WhereExpression,
                Start = DateTime.Now.AddDays(-20),
                End = DateTime.Now,
                IsDesc = true
            };
        var log = await TscClient.LogService.GetLatestAsync(request);
        _logStr = JsonSerializer.Serialize(log);
    }  
}
